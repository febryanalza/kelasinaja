generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model activity_logs {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String    @db.Uuid
  user_name     String    @db.VarChar(255)
  user_email    String    @db.VarChar(255)
  user_role     String    @db.VarChar(50)
  action        String    @db.VarChar(255)
  action_type   String    @db.VarChar(100)
  resource_type String?   @db.VarChar(100)
  resource_id   String?   @db.VarChar(255)
  ip_address    String?   @db.Inet
  user_agent    String?
  details       Json?
  timestamp     DateTime? @default(now()) @db.Timestamptz(6)
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  users         users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_activity_logs_user")

  @@index([action_type, timestamp(sort: Desc)], map: "idx_activity_logs_action_timestamp")
  @@index([action_type], map: "idx_activity_logs_action_type")
  @@index([created_at], map: "idx_activity_logs_created_at")
  @@index([resource_type], map: "idx_activity_logs_resource_type")
  @@index([timestamp], map: "idx_activity_logs_timestamp")
  @@index([user_id], map: "idx_activity_logs_user_id")
  @@index([user_role], map: "idx_activity_logs_user_role")
  @@index([user_id, timestamp(sort: Desc)], map: "idx_activity_logs_user_timestamp")
}

model backup_records {
  id                Int       @id @default(autoincrement())
  filename          String    @db.VarChar(255)
  original_filename String?   @db.VarChar(255)
  file_path         String?   @db.VarChar(500)
  file_size         BigInt?
  backup_type       String?   @default("manual") @db.VarChar(50)
  status            String?   @default("in_progress") @db.VarChar(50)
  description       String?
  created_by        String?   @db.Uuid
  error_message     String?
  started_at        DateTime? @default(now()) @db.Timestamptz(6)
  completed_at      DateTime? @db.Timestamptz(6)
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  users             users?    @relation(fields: [created_by], references: [id], onUpdate: NoAction, map: "fk_backup_created_by")
}

model badges {
  id         BigInt   @id @default(autoincrement())
  user_id    String?  @db.Uuid
  badge      Int
  created_at DateTime @default(now()) @db.Timestamptz(6)
  users      users?   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model liked_videos {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String   @db.Uuid
  video_id   String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  videos     videos   @relation(fields: [video_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model purchased_videos {
  id             String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id        String   @db.Uuid
  video_id       String   @db.Uuid
  purchase_date  DateTime @default(now()) @db.Timestamptz(6)
  price_paid     Decimal  @db.Decimal
  payment_method String?
  payment_status String
  users          users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  videos         videos   @relation(fields: [video_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model roles {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(100)
  description String?
  permissions Json      @default("[]")
  is_active   Boolean?  @default(true)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
}

model subject {
  id                             String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title                          String
  videos_videos_subjectTosubject videos[] @relation("videos_subjectTosubject")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model subscriptions {
  id             String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id        String   @db.Uuid
  name           String
  start_date     DateTime @default(now()) @db.Timestamptz(6)
  end_date       DateTime @db.Timestamptz(6)
  price_paid     Decimal  @db.Decimal
  is_active      Boolean? @default(true)
  payment_method String?
  payment_status String
  created_at     DateTime @default(now()) @db.Timestamptz(6)
  users          users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model token_transactions {
  id               String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id          String   @db.Uuid
  amount           Int
  transaction_type String
  description      String?
  payment_method   String?
  payment_status   String?
  created_at       DateTime @default(now()) @db.Timestamptz(6)
  users            users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model tokens {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id      String   @unique @db.Uuid
  amount       Int      @default(0)
  last_updated DateTime @default(now()) @db.Timestamptz(6)
  users        users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id                 String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email              String               @unique
  full_name          String?
  avatar_url         String?
  grade              String?
  role               String               @default("student")
  created_at         DateTime             @default(now()) @db.Timestamptz(6)
  updated_at         DateTime             @default(now()) @db.Timestamptz(6)
  badge              BigInt?
  hash_password      String
  activity_logs      activity_logs[]
  backup_records     backup_records[]
  badges             badges[]
  liked_videos       liked_videos[]
  purchased_videos   purchased_videos[]
  subscriptions      subscriptions[]
  token_transactions token_transactions[]
  tokens             tokens?
  video_ratings      video_ratings[]
  videos             videos[]
  wishlists          wishlists[]
}

model video_ratings {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  video_id   String   @db.Uuid
  user_id    String   @db.Uuid
  rating     Decimal  @db.Decimal
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  videos     videos   @relation(fields: [video_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model video_views {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  video_id   String   @db.Uuid
  user_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  videos     videos   @relation(fields: [video_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model videos {
  id                              String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title                           String
  description                     String?
  grade                           String
  thumbnail                       String?
  video_url                       String
  price                           Decimal?           @default(0) @db.Decimal
  views                           Int?               @default(0)
  rating                          Decimal?           @default(0) @db.Decimal
  teacher_id                      String             @db.Uuid
  created_at                      DateTime           @default(now()) @db.Timestamptz(6)
  updated_at                      DateTime           @default(now()) @db.Timestamptz(6)
  subject                         String             @db.Uuid
  liked_videos                    liked_videos[]
  purchased_videos                purchased_videos[]
  video_ratings                   video_ratings[]
  video_views                     video_views[]
  subject_videos_subjectTosubject subject            @relation("videos_subjectTosubject", fields: [subject], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "videos_subject_id_fkey")
  users                           users              @relation(fields: [teacher_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  wishlists                       wishlists[]
}

model wishlists {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String   @db.Uuid
  video_id   String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  videos     videos   @relation(fields: [video_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
